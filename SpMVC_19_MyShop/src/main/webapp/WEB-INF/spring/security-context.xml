<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd">



	<!-- security 설정 -->
	<!-- rootContext랑 같은위치어야 한다. -->
	<!-- admin 사용자를 임시로 등록하여 login 테스트 -->
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="admin11"
					password="{noop}password" authorities="ROLE_ADMIN" />
				<security:user name="user11" password="{noop}password"
					authorities="ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

	<!-- value는 입력하지 않아도 입력값이 4 이다. -->
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg index="0" value="4"></constructor-arg>
	</bean>

	<bean id="securJDBC"
		class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="emsHiber" />
		<property name="rolePrefix" value="" />
		<property name="usersByUsernameQuery">
			<value>
				SELECT username, password, enabled
				FROM users WHERE username=?
			</value>
		</property>
		<property name="authoritiesByUsernameQuery">
			<value>
				SELECT username, authority
				FROM authorities WHERE username=?
			</value>
		</property>


	</bean>
	<!-- <security:jdbc-user-service data-source-ref="emsHiber" users-by-username-query="SELECT 
		username, password, enabled FROM users WHERE username=?" authorities-by-username-query="SELECT 
		username, authority FROM authorities WHERE username=?" /> -->

	<!-- DB에서 사용자 정보 불러오기 -->
	<security:authentication-manager>
		<security:authentication-provider
			user-service-ref="securJDBC">
			<security:password-encoder
				ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

	<bean class="com.biz.shop.provider.CustomAuthProvider"
		id="customAuth" />
		<security:authentication-manager>
			<security:authentication-provider ref="customAuth" />
		</security:authentication-manager>

	<!-- interceptor-url spring security를 통해서 접근할 url(path)를 설정 use-expressions 
		hasRole('역할')과 같은 표현식을 사용할 수 있도록 선언 -->
	<security:http auto-config="true" use-expressions="true">

		<security:csrf disabled="false" />

		<security:intercept-url pattern="/admin/**"
			access="hasRole('ADMIN')" />

		<!-- hasRole(~~~)에 등록된 칼럼만 들어갈 수 있다.. 자격 권한 부여 -->
		<security:intercept-url pattern="/auth/**"
			access="permitAll" />

		<security:intercept-url pattern="/**"
			access="permitAll" />

		<!-- 정상적으로 로그인이 되면 /로 REDIRECT 로그인이 실패하면 /login path error 변수를 하나 부착하여 
			다시 login으로 보내라 로그인 페이지를 주소로 지정 login-page="/auth/login" 로그인페이지 form action에 
			지정할 주소지정 login-processing-url="/login" 로그인 실패시 호출할 주소 지정 authentication-failure-url="/auth/login?error" 
			로그인 성공시 호출할 주소 지정 default-target-url="/" 로그인 페이지 form에 있는 username, password를 
			저장한 변수 username-parameter="username" password-parameter="password" -->
		<security:form-login login-page="/auth/login"

			login-processing-url="/login"
			authentication-failure-url="/auth/login?error"


			default-target-url="/auth/login_ok" 
			username-parameter="username"
			password-parameter="password" />

		<!-- logout을 시도해서 정상적으로 logout이 되면 / path로 redirect하라 -->
		<security:logout logout-url="/logout"
			logout-success-url="/" />

	</security:http>
</beans>
